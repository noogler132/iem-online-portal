'use strict';
var Client = require('./Client');
var Cookies = require('cookies');
var P = require('authbox-common/P');
var Promise = require('bluebird');

var connectInject = require('connect-inject');
var emptyFunction = require('authbox-common/emptyFunction');
var os = require('os');
var sha256 = require('sha256');

var COOKIE_AGE = 63072000000;
var RELINK_PROBABILITY = 0.01;

var HOSTNAME = os.hostname();

function generateUniqueID(type, clientIpAddress) {
  return sha256([type, clientIpAddress, HOSTNAME, Date.now()].join(','));
}

var IP_HEADERS = ['cf-connecting-ip', 'x-forwarded-for'];

function getIP(req) {
  if (req.ip) {
    return req.ip;
  }

  for (var i = 0; i < IP_HEADERS.length; i++) {
    var header = req.headers[IP_HEADERS[i]];
    if (header) {
      return header;
    }
  }

  return req.socket.remoteAddress;
}

var configured = false;

function ensureConfigured() {
  if (configured) {
    return;
  }

  Client.configure({
    getDefaultRequestData: function(req, cb) {
      var cookieName = sha256('authbox:local_machine_id:' + Client.config.apiKey);
      var localMachineID = req.cookies.get(cookieName);

      cb(null, {
        $endpointURL: req.originalUrl,
        $ipAddress: getIP(req),
        $localMachineID: {
          $key: localMachineID,
          $new: req._authbox.isNewLocalMachineID
        },
        $userAgent: getHeader(req, 'user-agent'),
        $referer: getHeader(req, 'referer'),
        $host: getHeader(req, 'host'),
      });
    }
  });

  configured = true;
}

function middleware(req, res, next) {
  ensureConfigured();

  var nextMiddleware = _middleware;

  if (!res.cookies) {
    req.cookies = res.cookies = new Cookies(req, res);
  }

  nextMiddleware(req, res, next);
}

function getCookieName(cookieType) {
  return sha256(['authbox', cookieType, Client.config.apiKey].join(':'));
}

function getHeader(req, name) {
  if (req.headers) {
    return req.headers[name];
  }
  return req.get(name);
}

function _middleware(req, res, next) {
  var linkProbability = RELINK_PROBABILITY;
  var cookieName = getCookieName('localMachineID');
  var localMachineID = req.cookies.get(cookieName);

  req._authbox = req._authbox || {};
  req._authbox.isNewLocalMachineID = req._authbox.isNewLocalMachineID || false;

  if (!localMachineID) {
    localMachineID = generateUniqueID('localMachineID:' + Client.config.apiKey, req.ip);
    req._authbox.isNewLocalMachineID = true;
    linkProbability = 1.0;
    req.cookies.set(cookieName, localMachineID);
  }

  var didGetPixel = req.cookies.get(getCookieName('didGetPixel'));
  if (!didGetPixel) {
    linkProbability = 1.0;
  }

  res.cookies.set(cookieName, localMachineID, {
    maxAge: COOKIE_AGE,
    httpOnly: true
  });

  if (P(Client.config.rollout)) {
    res.on('finish', function() {
      Client.logDefaultAction(req);
    });
  }

  if (Client.config.enableTrackingPixel && P(linkProbability)) {
    var impressionURL = Client.config.endpoint + '/pixel?LMID=' + localMachineID;

    connectInject({
      didInsert: function() {
        res.cookies.set(getCookieName('didGetPixel'), '1', {
          maxAge: COOKIE_AGE,
          httpOnly: true
        });
      },
      snippet: '<iframe src="' + impressionURL + '" width="0" height="0" style="border: none" />'
    })(req, res, next);
  } else {
    next();
  }
}

module.exports = middleware;
